/**
 * HdC+
 * Una colecci√≥n de peque√±as utilidades para la edici√≥n de hojas de c√°lculo
 * Copyright (C) Pablo Felip (@pfelipm). Se distribuye bajo licencia GNU GPL v3.
 *
 * @OnlyCurrentDoc
 */

const VERSION = 'Versi√≥n: 1.8 (enero 2024)';

// Para mostrar / ocultar pesta√±as por color
const COLORES_HOJAS = {
  naranja: { nombre: 'naranja', hex:'#ff9900' },
  azul: { nombre: 'azul', hex:'#0000ff' }
};

const urlAyudaFxPersonalizadas = 'https://bit.ly/funciones-hdcplus';

function onInstall(e) {
  
  // Otras cosas que se deben hacer siempre
  
  onOpen(e);
  
}

function onOpen() {

  const ui = SpreadsheetApp.getUi();
  ui.createAddonMenu()
    .addSubMenu(ui.createMenu('üîÄ Barajar datos')
      .addItem('Barajar por columnas', 'desordenarFil')
      .addItem('Barajar por filas', 'desordenarCol'))
    .addSubMenu(ui.createMenu('‚úÖ Casillas de verificaci√≥n')
      .addItem('‚úîÔ∏èÔ∏è Activar seleccionadas', 'check')
      .addItem('‚ùå Desactivar seleccionadas ', 'uncheck')
      .addItem('‚ûñ Invertir seleccionadas ', 'recheck'))
    .addSubMenu(ui.createMenu('üßÆ Estructura datos')
      .addItem('Consolidar dimensiones (despivotar)', 'unpivot')
      .addItem('Transponer (‚ò¢Ô∏è destructivo)', 'transponer'))
    .addSubMenu(ui.createMenu('üìê Estructura hoja de c√°lculo')
      .addItem('Eliminar celdas no seleccionadas', 'eliminarFyCNoSeleccionadas')
      .addItem('Eliminar F/C sobrantes', 'eliminarFyC')
      .addSeparator()
      .addItem('Insertar F/C nuevas', 'insertarFyC'))
    .addSubMenu(ui.createMenu('üëÅÔ∏è‚Äçüó®Ô∏è Gesti√≥n hojas')
      .addItem('Ocultar resto de hojas', 'ocultarHojas')
      .addItem('Mostrar hojas ocultas', 'mostrarHojas')
      .addItem('Mostrar todas excepto activa', 'mostrarTodasMenosActual')
      .addSeparator()
      .addItem('üîπMostrar hojas color azul', 'mostrarHojasAzul')        
      .addItem('üîπOcultar hojas color azul', 'ocultarHojasAzul')        
      .addItem('üî∏Mostrar hojas color naranja', 'mostrarHojasNaranja')        
      .addItem('üî∏Ocultar hojas color naranja', 'ocultarHojasNaranja')
      .addSeparator()
      .addItem('Eliminar hojas ocultas', 'eliminarHojasOcultas')
      .addItem('Eliminar todas excepto activa', 'eliminarHojas'))
    .addSubMenu(ui.createMenu('üß† Generar')
      .addItem('NIFs', 'generarNIF')
      .addItem('Nombres y apellidos', 'generarNombres'))
    .addSubMenu(ui.createMenu('üï∂Ô∏è Ofuscar')
      .addItem('Codificar texto en base64 ', 'base64')
      .addItem('Sustituir por hash MD2 (b64) ', 'hashMD2')
      .addItem('Sustituir por hash MD5 (b64) ', 'hashMD5')
      .addItem('Sustituir por hash SHA-1 (b64)', 'hashSHA1')
      .addItem('Sustituir por hash SHA-256 (b64)', 'hashSHA256')
      .addItem('Sustituir por hash SHA-384 (b64)', 'hashSHA384')
      .addItem('Sustituir por hash SHA-512 (b64)', 'hashSHA512'))
    .addSubMenu(ui.createMenu('‚ö° Transformar')
      .addItem('‚ùåüëΩ Eliminar caracteres especiales', 'latinizar')
      .addItem('‚ùå‚ûñ Eliminar espacios', 'eliminarEspacios')
      .addItem('‚ùåüî∫‚ûñ Eliminar espacios tras comas', 'eliminarEspaciosComas')
      .addItem('‚ùå‚Ü©Ô∏è Eliminar saltos de l√≠nea ', 'eliminarSaltos')
      .addItem('üî∫‚ûñÔ∏è Comas a espacios', 'comasEspacios')
      .addItem('üî∫‚Ü©Ô∏è Comas a saltos de l√≠nea', 'comasSaltos')
      .addItem('‚ûñüî∫ Espacios a comas', 'espaciosComas')      
      .addItem('‚ûñ‚Ü©Ô∏è Espacios a saltos de l√≠nea', 'espaciosSaltos')      
      .addItem('‚Ü©Ô∏è‚ûñ Saltos de l√≠nea a espacios', 'saltosEspacios')
      .addItem('‚Ü©Ô∏èüî∫ Saltos de l√≠nea a comas', 'saltosComas')
      .addItem('‚ÜóÔ∏è Iniciales a may√∫sculas', 'inicialesMays_')
      .addItem('‚¨ÜÔ∏è Inicial a may√∫sculas', 'inicialMays_')
      .addItem('üî† Todo a may√∫sculas', 'mayusculas')
      .addItem('üî§ Todo a min√∫sculas', 'minusculas'))
    .addSeparator()
    .addItem('üîÑ Forzar rec√°lculo de hoja', 'forzarRecalculo')
    .addSeparator()
    .addItem('üõü Ayuda fx personalizadas (sitio externo)', 'abrirWebExterna')
    .addSeparator()
    .addItem('üí° Acerca de HdC+', 'acercaDe')
    .addToUi();
}

// Abre el cuadro de di√°logo de informaci√≥n de HdC+
function acercaDe() {

  // Presentaci√≥n del complemento
  var panel = HtmlService.createTemplateFromFile('acercaDe');
  panel.version = VERSION;
  SpreadsheetApp.getUi().showModalDialog(panel.evaluate().setWidth(420).setHeight(350), 'üí° ¬øQu√© es HdC+?');
}

// Abre la web externa de documentaci√≥n de las funciones personalizadas de HdC+
// https://www.labnol.org/open-webpage-google-sheets-220507
function abrirWebExterna() {

  const htmlTemplate = HtmlService.createTemplateFromFile('ayudaFxPersonalizadas.html');
  htmlTemplate.url = urlAyudaFxPersonalizadas;
  SpreadsheetApp.getUi().showModelessDialog(
    htmlTemplate.evaluate().setHeight(20).setWidth(300),
    'üåê Abriendo sitio web...'
  );
  // No parece ser necesario
  Utilities.sleep(2000);

};

// Funciones de transformaci√≥n del texto

function minusculas()  {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
        return typeof c == 'string' ? c.toLowerCase() : c;
      })
    
    })
    r.setValues(matriz);
  })
    
}

function mayusculas() {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
        return typeof c == 'string' ? c.toUpperCase() : c;

      })
    
    })
    r.setValues(matriz);
  })
    
}

/**
 * Pasa a may√∫sculas la letra inicial de las celdas de los intervalos
 * seleccionados. Tiene en cuenta los caracteres especiales del castellano (vocales
 * con tilda, √±, etc.) y tambi√©n el resto de signos de puntuaci√≥n y
 * caracteres especiales (que no son tratados).
 */
function inicialMays_() {
  
  try {

    const rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();  
    rangos.map(rango => {
      
      const matriz = rango.getValues().map(fila => {
      
        return fila.map(celda => {
      
          // Solo se procesan cadenas de texto
          if (typeof celda != 'string') return celda;

          let pos = 0;
          while (celda.charAt(pos).toLowerCase() == celda.charAt(pos).toUpperCase() && pos < celda.length) pos++;
          if (pos < celda.length) return  celda.slice(0, pos) + celda.charAt(pos).toUpperCase() + celda.slice(pos + 1);
          else return celda;
          
        });
      
      });
      rango.setValues(matriz);

    });
  
  } catch(e) { throw `HdC+ dice: Error inesperado, contacta con soporte // ${e}`; }

}

/**
 * Capitaliza las celdas de los intervalos seleccionados, pasando
 * las iniciales de cada palabra a may√∫sculas y el resto a min√∫sculas.
 * Tiene en cuenta los caracteres especiales del castellano (vocales
 * con tilda, √±, etc.) y tambi√©n el resto de signos de puntuaci√≥n y
 * caracteres especiales (que no son tratados). Pretende ser un clon
 * de la funci√≥n integrada NOMPROPIO().
 * 03/03/23
 */
function inicialesMays_() {

  try {

    const rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();  
    rangos.map(rango => {
      
      const matriz = rango.getValues().map(fila => {
      
        return fila.map(celda => {
      
          // Solo se procesan cadenas de texto
          if (typeof celda != 'string') return celda;

          // [1] Se identifican los caracteres no est√°ndar, pueden incluir vocales con tilde, e√±es, etc.
          const coincidencias = celda.matchAll(/\W/gi);
          let noAptos = [];
          for (let coincidencia of coincidencias) {
            noAptos.push( { indice: coincidencia.index, caracter: coincidencia[0]});
          }
          // Descartar espacios
          noAptos = noAptos.filter(noApto => noApto.caracter != ' ');
          
          // [2] Ahora los eliminamos todos de la cadena original a procesar, se convierte a vector
          //     para poder modificar elementos en el siguiente paso.
          const prep = [...celda.replaceAll(/\W/gi, ' ')];
          
          // [3] Antes de que split().join() hagan su magia hay que reinsertar en su lugar los caracteres que s√≠ deseamos procesar
          noAptos.forEach(coincidencia => {
            // Si hay diferencia entre may√∫sculas / min√∫sculas es que el car√°cter debe ser tratado y debemos reinsertarlo ahora
            if (coincidencia.caracter.toLowerCase() != coincidencia.caracter.toUpperCase()) {
              prep[coincidencia.indice] =  coincidencia.caracter;
            }
          });

          // [4] Aplicamos la transformaci√≥n, solo iniciales de palabras a may√∫sculas, resto a min√∫sculas
          const nuevoVectorCadena = [
            ...prep.join('')
            .toLowerCase()
            .split(' ')
            // split() devuelve n-1 caracteres [''] al trocear una secuencia de n espacios consecutivos
            .map(palabra => palabra.at(0) ? palabra.at(0).toUpperCase() + palabra.slice(1) : '')
            .join(' ')
          ];

          // [5] Resinsertar en su lugar el resto de caracteres especiales que no deb√≠an ser tenidos en cuenta
          noAptos.forEach(caracter => {
            // Si no hay diferencia entre may√∫sculas / min√∫sculas es que el car√°cter debe ser reinsertado
            if (caracter.caracter.toLowerCase() == caracter.caracter.toUpperCase()) {
              nuevoVectorCadena[caracter.indice] = caracter.caracter;
            }
          });    

          // Se transforma el vector en cadena de nuevo
          return nuevoVectorCadena.join('');
          
        });
      
      });
      rango.setValues(matriz);

    });
  
  } catch(e) { throw `HdC+ dice: Error inesperado, contacta con soporte // ${e}`; }

}

// Funci√≥n gen√©rica que sustituye las coincidencias de la expresi√≥n regular
// exp por caracter en todas las celdas de los rangos seleccionados

function sustituir(exp, caracter) {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
        return c.replace(exp, caracter);
      })
    
    })
    r.setValues(matriz);
  })
    
}

function eliminarEspacios() {sustituir(/\s+/g, '');}
function eliminarEspaciosComas() {sustituir(/,\s+/g, ',');}
function eliminarSaltos() {sustituir(/\n/g, '');}
function comasEspacios() {sustituir(/,/g, ' ');}
function comasSaltos() {sustituir(/,/g, '\n');}
function espaciosComas() {sustituir(/\s/g, ',');}
function espaciosSaltos() {sustituir(/\s/g, '\n');}
function saltosEspacios() {sustituir(/\n/g, ' ');}
function saltosComas() {sustituir(/\n/g, ',');}


function latinizar() {

  var latinise={};latinise.latin_map={"¬∑":"-","√ü":"ss","√Å":"A","ƒÇ":"A","·∫Æ":"A","·∫∂":"A","·∫∞":"A","·∫≤":"A","·∫¥":"A","«ç":"A","√Ç":"A","·∫§":"A","·∫¨":"A","·∫¶":"A","·∫®":"A","·∫™":"A","√Ñ":"A","«û":"A","»¶":"A","«†":"A","·∫†":"A","»Ä":"A","√Ä":"A","·∫¢":"A","»Ç":"A","ƒÄ":"A","ƒÑ":"A","√Ö":"A","«∫":"A","·∏Ä":"A","»∫":"A","√É":"A","Íú≤":"AA","√Ü":"AE","«º":"AE","«¢":"AE","Íú¥":"AO","Íú∂":"AU","Íú∏":"AV","Íú∫":"AV","Íúº":"AY","·∏Ç":"B","·∏Ñ":"B","∆Å":"B","·∏Ü":"B","…É":"B","∆Ç":"B","ƒÜ":"C","ƒå":"C","√á":"C","·∏à":"C","ƒà":"C","ƒä":"C","∆á":"C","»ª":"C","ƒé":"D","·∏ê":"D","·∏í":"D","·∏ä":"D","·∏å":"D","∆ä":"D","·∏é":"D","«≤":"D","«Ö":"D","ƒê":"D","∆ã":"D","«±":"DZ","«Ñ":"DZ","√â":"E","ƒî":"E","ƒö":"E","»®":"E","·∏ú":"E","√ä":"E","·∫æ":"E","·ªÜ":"E","·ªÄ":"E","·ªÇ":"E","·ªÑ":"E","·∏ò":"E","√ã":"E","ƒñ":"E","·∫∏":"E","»Ñ":"E","√à":"E","·∫∫":"E","»Ü":"E","ƒí":"E","·∏ñ":"E","·∏î":"E","ƒò":"E","…Ü":"E","·∫º":"E","·∏ö":"E","Íù™":"ET","·∏û":"F","∆ë":"F","«¥":"G","ƒû":"G","«¶":"G","ƒ¢":"G","ƒú":"G","ƒ†":"G","∆ì":"G","·∏†":"G","«§":"G","·∏™":"H","»û":"H","·∏®":"H","ƒ§":"H","‚±ß":"H","·∏¶":"H","·∏¢":"H","·∏§":"H","ƒ¶":"H","√ç":"I","ƒ¨":"I","«è":"I","√é":"I","√è":"I","·∏Æ":"I","ƒ∞":"I","·ªä":"I","»à":"I","√å":"I","·ªà":"I","»ä":"I","ƒ™":"I","ƒÆ":"I","∆ó":"I","ƒ®":"I","·∏¨":"I","Íùπ":"D","Íùª":"F","ÍùΩ":"G","ÍûÇ":"R","ÍûÑ":"S","ÍûÜ":"T","Íù¨":"IS","ƒ¥":"J","…à":"J","·∏∞":"K","«®":"K","ƒ∂":"K","‚±©":"K","ÍùÇ":"K","·∏≤":"K","∆ò":"K","·∏¥":"K","ÍùÄ":"K","ÍùÑ":"K","ƒπ":"L","»Ω":"L","ƒΩ":"L","ƒª":"L","·∏º":"L","·∏∂":"L","·∏∏":"L","‚±†":"L","Íùà":"L","·∏∫":"L","ƒø":"L","‚±¢":"L","«à":"L","≈Å":"L","«á":"LJ","·∏æ":"M","·πÄ":"M","·πÇ":"M","‚±Æ":"M","≈É":"N","≈á":"N","≈Ö":"N","·πä":"N","·πÑ":"N","·πÜ":"N","«∏":"N","∆ù":"N","·πà":"N","»†":"N","«ã":"N","√ë":"N","«ä":"NJ","√ì":"O","≈é":"O","«ë":"O","√î":"O","·ªê":"O","·ªò":"O","·ªí":"O","·ªî":"O","·ªñ":"O","√ñ":"O","»™":"O","»Æ":"O","»∞":"O","·ªå":"O","≈ê":"O","»å":"O","√í":"O","·ªé":"O","∆†":"O","·ªö":"O","·ª¢":"O","·ªú":"O","·ªû":"O","·ª†":"O","»é":"O","Íùä":"O","Íùå":"O","≈å":"O","·πí":"O","·πê":"O","∆ü":"O","«™":"O","«¨":"O","√ò":"O","«æ":"O","√ï":"O","·πå":"O","·πé":"O","»¨":"O","∆¢":"OI","Íùé":"OO","∆ê":"E","∆Ü":"O","»¢":"OU","·πî":"P","·πñ":"P","Íùí":"P","∆§":"P","Íùî":"P","‚±£":"P","Íùê":"P","Íùò":"Q","Íùñ":"Q","≈î":"R","≈ò":"R","≈ñ":"R","·πò":"R","·πö":"R","·πú":"R","»ê":"R","»í":"R","·πû":"R","…å":"R","‚±§":"R","Íúæ":"C","∆é":"E","≈ö":"S","·π§":"S","≈†":"S","·π¶":"S","≈û":"S","≈ú":"S","»ò":"S","·π†":"S","·π¢":"S","·π®":"S","≈§":"T","≈¢":"T","·π∞":"T","»ö":"T","»æ":"T","·π™":"T","·π¨":"T","∆¨":"T","·πÆ":"T","∆Æ":"T","≈¶":"T","‚±Ø":"A","ÍûÄ":"L","∆ú":"M","…Ö":"V","Íú®":"TZ","√ö":"U","≈¨":"U","«ì":"U","√õ":"U","·π∂":"U","√ú":"U","«ó":"U","«ô":"U","«õ":"U","«ï":"U","·π≤":"U","·ª§":"U","≈∞":"U","»î":"U","√ô":"U","·ª¶":"U","∆Ø":"U","·ª®":"U","·ª∞":"U","·ª™":"U","·ª¨":"U","·ªÆ":"U","»ñ":"U","≈™":"U","·π∫":"U","≈≤":"U","≈Æ":"U","≈®":"U","·π∏":"U","·π¥":"U","Íùû":"V","·πæ":"V","∆≤":"V","·πº":"V","Íù†":"VY","·∫Ç":"W","≈¥":"W","·∫Ñ":"W","·∫Ü":"W","·∫à":"W","·∫Ä":"W","‚±≤":"W","·∫å":"X","·∫ä":"X","√ù":"Y","≈∂":"Y","≈∏":"Y","·∫é":"Y","·ª¥":"Y","·ª≤":"Y","∆≥":"Y","·ª∂":"Y","·ªæ":"Y","»≤":"Y","…é":"Y","·ª∏":"Y","≈π":"Z","≈Ω":"Z","·∫ê":"Z","‚±´":"Z","≈ª":"Z","·∫í":"Z","»§":"Z","·∫î":"Z","∆µ":"Z","ƒ≤":"IJ","≈í":"OE","·¥Ä":"A","·¥Å":"AE"," ô":"B","·¥É":"B","·¥Ñ":"C","·¥Ö":"D","·¥á":"E","Íú∞":"F","…¢":"G"," õ":"G"," ú":"H","…™":"I"," Å":"R","·¥ä":"J","·¥ã":"K"," ü":"L","·¥å":"L","·¥ç":"M","…¥":"N","·¥è":"O","…∂":"OE","·¥ê":"O","·¥ï":"OU","·¥ò":"P"," Ä":"R","·¥é":"N","·¥ô":"R","Íú±":"S","·¥õ":"T","‚±ª":"E","·¥ö":"R","·¥ú":"U","·¥†":"V","·¥°":"W"," è":"Y","·¥¢":"Z","√°":"a","ƒÉ":"a","·∫Ø":"a","·∫∑":"a","·∫±":"a","·∫≥":"a","·∫µ":"a","«é":"a","√¢":"a","·∫•":"a","·∫≠":"a","·∫ß":"a","·∫©":"a","·∫´":"a","√§":"a","«ü":"a","»ß":"a","«°":"a","·∫°":"a","»Å":"a","√†":"a","·∫£":"a","»É":"a","ƒÅ":"a","ƒÖ":"a","·∂è":"a","·∫ö":"a","√•":"a","«ª":"a","·∏Å":"a","‚±•":"a","√£":"a","Íú≥":"aa","√¶":"ae","«Ω":"ae","«£":"ae","Íúµ":"ao","Íú∑":"au","Íúπ":"av","Íúª":"av","ÍúΩ":"ay","·∏É":"b","·∏Ö":"b","…ì":"b","·∏á":"b","·µ¨":"b","·∂Ä":"b","∆Ä":"b","∆É":"b","…µ":"o","ƒá":"c","ƒç":"c","√ß":"c","·∏â":"c","ƒâ":"c","…ï":"c","ƒã":"c","∆à":"c","»º":"c","ƒè":"d","·∏ë":"d","·∏ì":"d","»°":"d","·∏ã":"d","·∏ç":"d","…ó":"d","·∂ë":"d","·∏è":"d","·µ≠":"d","·∂Å":"d","ƒë":"d","…ñ":"d","∆å":"d","ƒ±":"i","»∑":"j","…ü":"j"," Ñ":"j","«≥":"dz","«Ü":"dz","√©":"e","ƒï":"e","ƒõ":"e","»©":"e","·∏ù":"e","√™":"e","·∫ø":"e","·ªá":"e","·ªÅ":"e","·ªÉ":"e","·ªÖ":"e","·∏ô":"e","√´":"e","ƒó":"e","·∫π":"e","»Ö":"e","√®":"e","·∫ª":"e","»á":"e","ƒì":"e","·∏ó":"e","·∏ï":"e","‚±∏":"e","ƒô":"e","·∂í":"e","…á":"e","·∫Ω":"e","·∏õ":"e","Íù´":"et","·∏ü":"f","∆í":"f","·µÆ":"f","·∂Ç":"f","«µ":"g","ƒü":"g","«ß":"g","ƒ£":"g","ƒù":"g","ƒ°":"g","…†":"g","·∏°":"g","·∂É":"g","«•":"g","·∏´":"h","»ü":"h","·∏©":"h","ƒ•":"h","‚±®":"h","·∏ß":"h","·∏£":"h","·∏•":"h","…¶":"h","·∫ñ":"h","ƒß":"h","∆ï":"hv","√≠":"i","ƒ≠":"i","«ê":"i","√Æ":"i","√Ø":"i","·∏Ø":"i","·ªã":"i","»â":"i","√¨":"i","·ªâ":"i","»ã":"i","ƒ´":"i","ƒØ":"i","·∂ñ":"i","…®":"i","ƒ©":"i","·∏≠":"i","Íù∫":"d","Íùº":"f","·µπ":"g","ÍûÉ":"r","ÍûÖ":"s","Íûá":"t","Íù≠":"is","«∞":"j","ƒµ":"j"," ù":"j","…â":"j","·∏±":"k","«©":"k","ƒ∑":"k","‚±™":"k","ÍùÉ":"k","·∏≥":"k","∆ô":"k","·∏µ":"k","·∂Ñ":"k","ÍùÅ":"k","ÍùÖ":"k","ƒ∫":"l","∆ö":"l","…¨":"l","ƒæ":"l","ƒº":"l","·∏Ω":"l","»¥":"l","·∏∑":"l","·∏π":"l","‚±°":"l","Íùâ":"l","·∏ª":"l","≈Ä":"l","…´":"l","·∂Ö":"l","…≠":"l","≈Ç":"l","«â":"lj","≈ø":"s","·∫ú":"s","·∫õ":"s","·∫ù":"s","·∏ø":"m","·πÅ":"m","·πÉ":"m","…±":"m","·µØ":"m","·∂Ü":"m","≈Ñ":"n","≈à":"n","≈Ü":"n","·πã":"n","»µ":"n","·πÖ":"n","·πá":"n","«π":"n","…≤":"n","·πâ":"n","∆û":"n","·µ∞":"n","·∂á":"n","…≥":"n","√±":"n","«å":"nj","√≥":"o","≈è":"o","«í":"o","√¥":"o","·ªë":"o","·ªô":"o","·ªì":"o","·ªï":"o","·ªó":"o","√∂":"o","»´":"o","»Ø":"o","»±":"o","·ªç":"o","≈ë":"o","»ç":"o","√≤":"o","·ªè":"o","∆°":"o","·ªõ":"o","·ª£":"o","·ªù":"o","·ªü":"o","·ª°":"o","»è":"o","Íùã":"o","Íùç":"o","‚±∫":"o","≈ç":"o","·πì":"o","·πë":"o","«´":"o","«≠":"o","√∏":"o","«ø":"o","√µ":"o","·πç":"o","·πè":"o","»≠":"o","∆£":"oi","Íùè":"oo","…õ":"e","·∂ì":"e","…î":"o","·∂ó":"o","»£":"ou","·πï":"p","·πó":"p","Íùì":"p","∆•":"p","·µ±":"p","·∂à":"p","Íùï":"p","·µΩ":"p","Íùë":"p","Íùô":"q"," †":"q","…ã":"q","Íùó":"q","≈ï":"r","≈ô":"r","≈ó":"r","·πô":"r","·πõ":"r","·πù":"r","»ë":"r","…æ":"r","·µ≥":"r","»ì":"r","·πü":"r","…º":"r","·µ≤":"r","·∂â":"r","…ç":"r","…Ω":"r","‚ÜÑ":"c","Íúø":"c","…ò":"e","…ø":"r","≈õ":"s","·π•":"s","≈°":"s","·πß":"s","≈ü":"s","≈ù":"s","»ô":"s","·π°":"s","·π£":"s","·π©":"s"," Ç":"s","·µ¥":"s","·∂ä":"s","»ø":"s","…°":"g","·¥ë":"o","·¥ì":"o","·¥ù":"u","≈•":"t","≈£":"t","·π±":"t","»õ":"t","»∂":"t","·∫ó":"t","‚±¶":"t","·π´":"t","·π≠":"t","∆≠":"t","·πØ":"t","·µµ":"t","∆´":"t"," à":"t","≈ß":"t","·µ∫":"th","…ê":"a","·¥Ç":"ae","«ù":"e","·µ∑":"g","…•":"h"," Æ":"h"," Ø":"h","·¥â":"i"," û":"k","ÍûÅ":"l","…Ø":"m","…∞":"m","·¥î":"oe","…π":"r","…ª":"r","…∫":"r","‚±π":"r"," á":"t"," å":"v"," ç":"w"," é":"y","Íú©":"tz","√∫":"u","≈≠":"u","«î":"u","√ª":"u","·π∑":"u","√º":"u","«ò":"u","«ö":"u","«ú":"u","«ñ":"u","·π≥":"u","·ª•":"u","≈±":"u","»ï":"u","√π":"u","·ªß":"u","∆∞":"u","·ª©":"u","·ª±":"u","·ª´":"u","·ª≠":"u","·ªØ":"u","»ó":"u","≈´":"u","·πª":"u","≈≥":"u","·∂ô":"u","≈Ø":"u","≈©":"u","·ππ":"u","·πµ":"u","·µ´":"ue","Íù∏":"um","‚±¥":"v","Íùü":"v","·πø":"v"," ã":"v","·∂å":"v","‚±±":"v","·πΩ":"v","Íù°":"vy","·∫É":"w","≈µ":"w","·∫Ö":"w","·∫á":"w","·∫â":"w","·∫Å":"w","‚±≥":"w","·∫ò":"w","·∫ç":"x","·∫ã":"x","·∂ç":"x","√Ω":"y","≈∑":"y","√ø":"y","·∫è":"y","·ªµ":"y","·ª≥":"y","∆¥":"y","·ª∑":"y","·ªø":"y","»≥":"y","·∫ô":"y","…è":"y","·ªπ":"y","≈∫":"z","≈æ":"z","·∫ë":"z"," ë":"z","‚±¨":"z","≈º":"z","·∫ì":"z","»•":"z","·∫ï":"z","·µ∂":"z","·∂é":"z"," ê":"z","∆∂":"z","…Ä":"z","Ô¨Ä":"ff","Ô¨É":"ffi","Ô¨Ñ":"ffl","Ô¨Å":"fi","Ô¨Ç":"fl","ƒ≥":"ij","≈ì":"oe","Ô¨Ü":"st","‚Çê":"a","‚Çë":"e","·µ¢":"i","‚±º":"j","‚Çí":"o","·µ£":"r","·µ§":"u","·µ•":"v","‚Çì":"x"};
  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
        return typeof c == 'string' ? c.replace(/[^A-Za-z0-9\[\] ]/g,function(a){return latinise.latin_map[a]||a}) : c;
      })
    
    })
    r.setValues(matriz);
  })
    
}

function unpivot() {

  var ui = HtmlService.createTemplateFromFile('panelUnpivot')
      .evaluate()
      .setTitle('Consolidar dimensiones');
  SpreadsheetApp.getUi().showSidebar(ui);
}

function unpivot_capturarRango(modo) {

  var hdc = SpreadsheetApp.getActiveSheet();

  if (modo == 'rango') {
    var rango = hdc.getActiveRange();
    if (rango.getNumColumns() >= 2 && rango.getNumRows() >= 2) {
      return hdc.getName() + '!' + rango.getA1Notation();
    }
    else {
      return '¬°Selecciona m√°s celdas!';
    }
  }
  else if (modo == 'celda') {
    return hdc.getName() + '!' + hdc.getActiveCell().getA1Notation();
  }
  
}

function unpivot_core(e) {

  var hdc = SpreadsheetApp.getActiveSpreadsheet();
  
  // Recibir par√°metros panel unpivot
  
  var rango = hdc.getRange(e.rango);
  var destino = hdc.getRange(e.destino); 
  var colFijas = +e.numCol;
  var nEncabezados = colFijas + 2;
  var encabezados = e.encabezados.split('\n'); // Dividir cadena por saltos de l√≠nea
  var nEncabezadosSplit = encabezados.length;
  var matrizConsolidada = [];
  var encabezadosUnpivot = [];
  var i;
    
  // Todo en bloque try..catch para cazar problemas
  
  try {
    
    // Construir vector de encabezados, primero tomamos los introducidos por el usuario
    // Se trata el caso de que el usuario haya introducido intros de m√°s en caja de texto
    
    for (i = 0; i < nEncabezadosSplit && i < nEncabezados; i++) {
      if (encabezados[i].length == 0) {
        encabezadosUnpivot.push('Columna ' + (i + 1));
      }
      else {
        encabezadosUnpivot.push(encabezados[i]);
      }
    }
    
    // Si faltan, completamos con "Columna n"
    
    for (i = nEncabezadosSplit; i < nEncabezados; i++) {
      encabezadosUnpivot.push('Columna ' + (i + 1));
    }
    
    // UNPIVOT espera un vector fila con los encabezados
    
    var encabezadosUnpivotH = [];
    encabezadosUnpivotH.push(encabezadosUnpivot);
    
    // Aplicar UNPIVOT
    
    matrizConsolidada = UNPIVOT(rango.getValues(), colFijas, encabezadosUnpivotH);
   
    // Expandir rango destino para recibir tabla consolidada y rellenar celdas
    
    destino.offset(0, 0, matrizConsolidada.length, matrizConsolidada[0].length).setValues(matrizConsolidada);

  }

  catch(e) {
  
      SpreadsheetApp.getUi().alert(e);
      return (e);
      
  }
  
}

function insertarFyC() {

  var ui = HtmlService.createTemplateFromFile('panelCrearFyC')
      .evaluate()
      .setTitle('Insertar filas y/o columnas');
  SpreadsheetApp.getUi().showSidebar(ui);
  
}

function insertarFyC_core(e) {
  
  var nFil = +e.numFil;
  var nCol = +e.numCol;
  var modo = +e.modo;
  var hdc = SpreadsheetApp.getActiveSheet();
  
  // Fila y Columna posici√≥n superior izquierda rango seleccionado
  
  var fil = hdc.getActiveCell().getRow();
  var col = hdc.getActiveCell().getColumn();
  
  // Fila y Columna m√°ximas
  
  var filMax = hdc.getMaxRows();
  var colMax = hdc.getMaxColumns();
    
  switch (modo) {
  
    case 1: // al principio de la hoja
      
      if (nFil > 0) {hdc.insertRowsBefore(1, nFil);}
      if (nCol > 0) {hdc.insertColumnsBefore(1, nCol);}
      break;
    
    case 2: // al final de la hoja
    
      if (nFil > 0) {hdc.insertRowsAfter(filMax, nFil);}
      if (nCol > 0) {hdc.insertColumnsAfter(colMax, nCol);}
      break;
    
    case 3: // antes de celda
      
      if (nFil > 0) {hdc.insertRowsBefore(fil, nFil);}
      if (nCol > 0) {hdc.insertColumnsBefore(col, nCol);}
      break;
      
    case 4: // despu√©s de celda
      if (nFil > 0) {hdc.insertRowsAfter(fil, nFil);}
      if (nCol > 0) {hdc.insertColumnsAfter(col, nCol);}
      break;    
  }
}

function eliminarFyC() {

  var ui = HtmlService.createTemplateFromFile('panelEliminarFyC')
      .evaluate()
      .setTitle('Eliminar filas y/o columnas sobrantes');
  SpreadsheetApp.getUi().showSidebar(ui);
  
}

function eliminarFyC_core(e) {
  
  var modo = +e.modo;
  var global = e.global == 'on' ? true : false;
    
  var nFilas, nMaxFilas, nColumnas, nMaxColumnas;
  var hojas = global ? SpreadsheetApp.getActiveSpreadsheet().getSheets() : SpreadsheetApp.getActiveSheet();
    
  if (global) { // se procesan todas las hojas de la hdc
  
    hojas.map(function(h) {
      
      nFilas = h.getLastRow();
      nMaxFilas = h.getMaxRows();
      nColumnas = h.getLastColumn();
      nMaxColumnas = h.getMaxColumns();
      if (nFilas > 0 && nColumnas > 0) {
        
        switch (modo) {
        
          case 1: // Columnas
          
            if (nMaxColumnas > nColumnas) {h.deleteColumns(nColumnas+1, nMaxColumnas - nColumnas);}
            break;
          
          case 2: // Filas
      
            if (nMaxFilas > nFilas) {h.deleteRows(nFilas+1, nMaxFilas - nFilas);}
            break;   
            
          case 3: // Filas y columnas 
          
            if (nMaxColumnas > nColumnas) {h.deleteColumns(nColumnas+1, nMaxColumnas - nColumnas);}
            if (nMaxFilas > nFilas) {h.deleteRows(nFilas+1, nMaxFilas - nFilas);}          
            break;
        }      
      }
  })}
  else { // solo se procesa la hoja actual
  
    nFilas = hojas.getLastRow();
    nMaxFilas = hojas.getMaxRows();
    nColumnas = hojas.getLastColumn();
    nMaxColumnas = hojas.getMaxColumns();
    if (nFilas == 0 || nColumnas == 0) {
      SpreadsheetApp.getUi().alert('üí° La hoja de datos est√° vac√≠a, no se eliminar√° nada.');
    }
    else {
    
      switch (modo) {
      
        case 1: // Columnas
        
          if (nMaxColumnas > nColumnas) {hojas.deleteColumns(nColumnas+1, nMaxColumnas - nColumnas);}
          break;
        
        case 2: // Filas
    
          if (nMaxFilas > nFilas) {hojas.deleteRows(nFilas+1, nMaxFilas - nFilas);}
          break;   
          
        case 3: // Filas y columnas 
        
          if (nMaxColumnas > nColumnas) {hojas.deleteColumns(nColumnas+1, nMaxColumnas - nColumnas);}
          if (nMaxFilas > nFilas) {hojas.deleteRows(nFilas+1, nMaxFilas - nFilas);}          
          break;
      }
    }
  }
  
}

/**
 * Elimina las filas y columnas de la hoja actual que quedan fuera del intervalo (√∫nico) de celdas seleccionado
 */
function eliminarFyCNoSeleccionadas() {

  const ui = SpreadsheetApp.getUi();
  const hoja = SpreadsheetApp.getActiveSheet();
  const rangosSeleccionados = hoja.getActiveRangeList().getRanges();
  
  console.info(rangosSeleccionados.length);

  if (rangosSeleccionados.length > 1) {
    ui.alert('Selecciona un √∫nico intervalo de datos.');
  } else {

    const filSup = rangosSeleccionados[0].getRow();
    const colIzq = rangosSeleccionados[0].getColumn();
    const numFil = rangosSeleccionados[0].getNumRows();
    const numCol = rangosSeleccionados[0].getNumColumns();

    try {

      // Eliminar filas anteriores sobrantes
      if (filSup > 1) hoja.deleteRows(1, filSup - 1);

      // Eliminar filas posteriores sobrantes
      if (numFil < hoja.getMaxRows()) hoja.deleteRows(numFil + 1, hoja.getMaxRows() - numFil);

      // Eliminar columnas a la izquierda sobrantes
      if (colIzq > 1) hoja.deleteColumns(1, colIzq - 1);

      // Eliminar columnas a la derecha sobrantes
      if (numCol < hoja.getMaxColumns()) hoja.deleteColumns(numCol + 1, hoja.getMaxColumns() - numCol);

      // Deseleccionar intervalo (hace activa la celda A1 a pi√±√≥n fijo)
      hoja.setActiveRange(hoja.getRange('A1'));
    
    } catch (e) {
      ui.alert(`Se ha producido un error inesperado al ajustar eliminar las filas y columnas no seleccionadas.
        
        ‚ö†Ô∏è ${e.message}`, ui.ButtonSet.OK);
    }
  }

}


function base64()  {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
        return Utilities.base64Encode(c, Utilities.Charset.UTF_8);
      })
    
    })
    r.setValues(matriz);
  })
    
}

function hashGenerico(rango, tipoHash) {

  // Tomado de https://stackoverflow.com/questions/7994410/hash-of-a-cell-text-in-google-spreadsheet

  var matriz = rango.getValues();
  var ncol = matriz[0].length;
  var nfil = matriz.length;
  
 for (var c = 0; c < ncol; c++) {
    for (var f = 0; f < nfil; f++) {
      var valor = matriz[f][c];      
      matriz[f][c] = Utilities.base64Encode(Utilities.computeDigest(tipoHash, valor, Utilities.Charset.UTF_8));
    }
  }
  
  rango.setValues(matriz);
  
}

// Funciones auxiliares para hashes y base64

// Convierte hash binario en hexadecimal

function bin2hex(rawHash) {

  var txtHash = '';
  var hashVal;
  
  for (var j = 0; j <rawHash.length; j++) {
  
    hashVal = rawHash[j];
    if (hashVal < 0)
      hashVal += 256; 
    if (hashVal.toString(16).length == 1)
      txtHash += "0";
    txtHash += hashVal.toString(16);
  }      
  return txtHash;

}

// Convierte cadena hexadecimal en vector de bytes

function hex2bytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
    bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

// Invocaci√≥n de hashGenerico() para cada tipo

function hashSHA256() {
  
  SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges().map(function(r) {
    
    hashGenerico(r, Utilities.DigestAlgorithm.SHA_256);})
  
}

function hashSHA384() {

  SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges().map(function(r) {
  
    hashGenerico(r, Utilities.DigestAlgorithm.SHA_384);})  
  
}

function hashSHA512() {

SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges().map(function(r) {

  hashGenerico(r, Utilities.DigestAlgorithm.SHA_512);})  
  
}

function hashSHA1() {

SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges().map(function(r) {

  hashGenerico(r, Utilities.DigestAlgorithm.SHA_1);})
  
}

function hashMD2() {

SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges().map(function(r) {

  hashGenerico(r, Utilities.DigestAlgorithm.MD2);})
  
}

function hashMD5() {

SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges().map(function(r) {

  hashGenerico(r, Utilities.DigestAlgorithm.MD5);})
  
}

function transponer() {

  var hojaActual = SpreadsheetApp.getActiveSheet();
  var rango = hojaActual.getActiveRange();
  var matriz = rango.getValues();
  var nCol = matriz[0].length;
  var nFil = matriz.length;
  var filDestino = rango.getRow();
  var colDestino = rango.getColumn();
  var rangoLibre;
  
  // Copiar transponiendo con todo (formato celda / n√∫mero / condicional, validaci√≥n, notas...
  
  rango.copyTo(hojaActual.getRange(filDestino, colDestino), SpreadsheetApp.CopyPasteType.PASTE_NORMAL, true)
  
  // Ahora limpiamos el rango que queda libre al transponer
  
  if (nCol != nFil) {
  
      // El rango es rectangular, hay que "limpiar" el espacio libre que deja tras la transposici√≥n
    
    if (nCol > nFil) {
      rangoLibre = hojaActual.getRange(filDestino, colDestino + nFil, nFil, nCol - nFil);
    }
    else {  // nCol < nFil
      rangoLibre = hojaActual.getRange(filDestino + nCol, colDestino, nFil - nCol, nCol);  
    }
    
    rangoLibre.clear();
    rangoLibre.clearNote();
    rangoLibre.clearDataValidations();
  }
}

function desordenarFil(){

  var rango = SpreadsheetApp.getActiveSheet().getActiveRange();
  var matriz = rango.getValues();
   
  // Comprobaciones previas
 
  if (matriz.length <= 1) {SpreadsheetApp.getUi().alert('üí° La selecci√≥n debe tener m√°s de 1 fila.');}
  
  var ncol = matriz[0].length;
  var nfil = matriz.length;

  for (var c = 0; c < ncol; c++) {
    for (var f = nfil - 1; f > 0; f--) { 
      var j = Math.floor(Math.random() * (f + 1));
      var temp = matriz[f][c];
      matriz[f][c] = matriz[j][c];
      matriz[j][c] = temp;
    }    
  }
  
  rango.setValues(matriz);
  
}

function desordenarCol(){

  var rango = SpreadsheetApp.getActiveSheet().getActiveRange();
  var matriz = rango.getValues();
   
  // Comprobaciones previas
 
  if (matriz[0].length <= 1) {SpreadsheetApp.getUi().alert('üí° La selecci√≥n debe tener m√°s de 1 columna.');}
  
  var ncol = matriz[0].length;
  var nfil = matriz.length;

  for (var f = 0; f < nfil; f++) {
    for (var c = ncol - 1; c > 0; c--) { 
      var j = Math.floor(Math.random() * (c + 1));
      var temp = matriz[f][c];
      matriz[f][c] = matriz[f][j];
      matriz[f][j] = temp;
    }    
  }
  
  rango.setValues(matriz);
  
}

function generarNIF()  {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  var dni;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
        var dni = '';
        for (var n = 0; n < 8; n++) {
          dni = dni + Math.floor(Math.random()*10).toString();
        }
        dni = dni + "TRWAGMYFPDXBNJZSQVHLCKE".charAt(+dni % 23);
      
        return dni;    
      })
    
    })
    r.setValues(matriz);
  })
    
}  

function generarNombres() {

  var nombresTop = ['Guillermo','Jos√© Luis','Nuria','Jos√©','David','Victor','Santiago','Francisco Jos√©','Marcos','Yolanda',
                'Isabel','C√©sar','Carolina','Nerea','Lucas','Alba','Gabriel','Salvador','Ignacio','Manuela','Mar√≠a Carmen',
                'Domingo','Rosario','Albert','Mar√≠a Jos√©','Samuel','Mar√≠a √Ångeles','Juan Antonio','Laura','Xavier','Lidia',
                'F√°tima','Paula','Jos√© Carlos','Joaquin','Marina','Alejandro','Juan Jos√©','Alicia','Jos√© Manuel','Pilar',
                'Luisa','Encarnaci√≥n','Alfredo','Felipe','Luis Miguel','Sergio','Antonia','Juan','Jos√© Ignacio','Beatriz',
                'Alvaro','Angel','Ruben','Luc√≠a','Luis','Rocio','Celia','Juana','Rafael','Irene','Tomas','Joan','Jos√© Maria',
                'Cristina','Aitor','Josep','Francisco','Rosa','Mar√≠a Mar','Veronica','Ana','Carla','Mar√≠a Concepci√≥n','Vicente',
                'Fernando','Ramon','Daniel','Alex','Susana','Sofia','Alejandra','Felix','Adrian','Jorge','Silvia','Gloria','Josefa',
                'Ana Isabel','Inmaculada','Miriam','Catalina','Hugo','Jos√© Francisco','Javier','Alfonso','Aurora','Ainhoa',
                'Juan Manuel','Sandra','Concepci√≥n','Manuel','Amparo','Daniela','Mar√≠a Rosa','Noelia','Rodrigo','Ismael','Mart√≠n',
                'Mar√≠a Jes√∫s','Juan Luis','Claudia','Mar√≠a Isabel','Mar√≠a','Jos√© Antonio','Emilio','Andr√©s','Jos√© Angel',
                'Mar√≠a Antonia','Pablo','Juan Francisco','Consuelo','Martina','Ra√∫l','Antonio','Esther','Dolores','Mar√≠a Dolores',
                'H√©ctor','Carlos','Olga','Miguel √Ångel','Gregorio','Andrea','Miguel','Mar√≠a Teresa','Diego','Rosa Mar√≠a','Mar√≠a Pilar',
                'Mercedes','Elena','Maria Rosario','Marc','Victoria','Victor Manuel','Nicolas','Patricia','Alberto','Roberto',
                'Gonzalo','In√©s','Mar√≠a Josefa','M√≥nica','Jos√© Ramon','Oscar','√Ångela','Emilia','Mar√≠a Lu√≠sa','Ana Mar√≠a',
                'Mar√≠a Mercedes','Jaime','Lorena','Agust√≠n','Juli√°n','Raquel','Eva Mar√≠a','Marta','Pedro','√çker','Margarita',
                'Mariano','Mario','Ana Bel√©n','Mar√≠a Elena','Francisco Javier','Francisca','Mar√≠a Nieves','Mar√≠a Soledad','Carmen',
                'Enrique','Julia','Teresa','Sebasti√°n','√Ångeles','Juan Carlos','Montserrat','Cristian','Jes√∫s','Mar√≠a Victoria',
                'Natalia','Jos√© Miguel','Eva','Eduardo','Jordi','Iv√°n','Mohamed','Julio','Ricardo','Sonia'];
 
 var apellidosTop = ['Gonz√°lez','Rodr√≠guez','Fern√°ndez','L√≥pez','Mart√≠nez','S√°nchez','P√©rez','G√≥mez','Mart√≠n','Jim√©nez','Ru√≠z',
                      'Hern√°ndez','D√≠az','Moreno','Mu√±oz','√Ålvarez','Romero','Alonso','Guti√©rrez','Navarro','Torres','Dom√≠nguez',
                      'V√°zquez','Ramos','Gil','Ram√≠rez','Serrano','Blanco','Molina','Morales','Su√°rez','Ortega','Delgado','Castro',
                      'Ortiz','Rubio','Mar√≠n','Sanz','N√∫√±ez','Iglesias','Medina','Garrido','Cort√©s','Castillo','Santos','Lozano',
                      'Guerrero','Cano','Prieto','M√©ndez','Cruz','Calvo','Gallego','Herrera','M√°rquez','Le√≥n','Vidal','Pe√±a',
                      'Flores','Cabrera','Campos','Vega','Fuentes','Carrasco','D√≠ez','Reyes','Caballero','Nieto','Aguilar',
                      'Pascual','Santana','Herrero','Montero','Lorenzo','Hidalgo','Gim√©nez','Ib√°√±ez','Ferrer','Dur√°n',
                      'Santiago','Ben√≠tez','Vargas','Mora','Vicente','Arias','Carmona','Crespo','Rom√°n','Pastor','Soto',
                      'S√°ez','Velasco','Moya','Soler','Parra','Esteban','Bravo','Gallardo','Rojas', 'Felip'];
       
  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  var ncol, nfil;
  
  rangos.map(function(r) {
  
    matriz = r.getValues();
    ncol = matriz[0].length;
    nfil = matriz.length;
  
    if (ncol == 3) {
    
      // El usuario desea apellido1, apellido2 y nombre en columnas contiguas
      
      for (var f = 0; f < nfil; f++) {
        matriz[f][0] = apellidosTop[Math.floor(Math.random()*apellidosTop.length)];
        matriz[f][1] = apellidosTop[Math.floor(Math.random()*apellidosTop.length)];
        matriz[f][2] = nombresTop[Math.floor(Math.random()*nombresTop.length)];
      }
    }
    
    else
    {
      
      // El usuario desea apellido1, apellido2 y nombre concatenados en todo el rango
  
      for (var c = 0; c < ncol; c++) {
        for (var f = 0; f < nfil; f++) {
          matriz[f][c] = apellidosTop[Math.floor(Math.random()*apellidosTop.length)] + ' ' +
                         apellidosTop[Math.floor(Math.random()*apellidosTop.length)] + ', ' +
                         nombresTop[Math.floor(Math.random()*nombresTop.length)];
        }
      }
    } 
    
    r.setValues(matriz);
  })

}                       

function forzarRecalculo() {
 
  // Hack para forzar rec√°lculo de funciones personalizadas
  // No funciona insertando fila por debajo, ocultando, moviendo a primera posici√≥n y eliminando :-/
  // √çdem con columnas
  SpreadsheetApp.getActiveSheet().insertRowBefore(1);
  SpreadsheetApp.getActiveSheet().setRowHeight(1, 1);
  SpreadsheetApp.flush();
  SpreadsheetApp.getActiveSheet().deleteRow(1);
  
}

// Funciones de manipulaci√≥n de casillas de verificaci√≥n

function check() {

  procesarCheck(true);

}


function uncheck() {

  procesarCheck(false);

}

/**
 * Procesa el rango seleccionado, ajustando el valor de 
 * las celdas con valores TRUE o FALSE al valor T/F indicado
 */

function procesarCheck(valor)  {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
        return (typeof c == 'boolean' ? valor : c);    
      })
    
    })
    r.setValues(matriz);
  })
    
}

/**
 * Procesa el rango seleccionado, invirtiendo el valor de 
 * las celdas con valores TRUE o FALSE 
 */

function recheck(valor)  {

  var rangos = SpreadsheetApp.getActiveSheet().getActiveRangeList().getRanges();
  var matriz;
  
  rangos.map(function(r) {
  
    matriz = r.getValues().map(function(c) {
      
      return c.map(function(c) {
      
       return (typeof c == 'boolean' ? !c : c);    
      })
    
    })
    r.setValues(matriz);
  })
    
}